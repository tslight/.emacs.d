;;; dabbrev.el --- dabbrev configuration -*- lexical-binding: t; -*-

;;; Commentary:

;; Dabbrev configuration

;; Copyright (C) 2020 Toby Slight
;; Author: Toby Slight <tslight@pm.me>

;;; Code:
(with-eval-after-load 'dabbrev
  (setq abbrev-file-name (concat user-emacs-directory "abbrevs"))
  (setq save-abbrevs 'silently)

  (setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
  (setq dabbrev-abbrev-skip-leading-regexp "[$*/=']")
  (setq dabbrev-backward-only nil)
  (setq dabbrev-case-distinction 'case-replace)
  (setq dabbrev-case-fold-search t)
  (setq dabbrev-case-replace 'case-replace)
  (setq dabbrev-check-other-buffers t)
  (setq dabbrev-eliminate-newlines t)
  (setq dabbrev-upcase-means-case-search t)

  (message "Lazy loaded dabbrev :-)"))

;;;###autoload
(defun my/hippie-expand-completions (&optional hippie-expand-function)
  "Return the full list of completions generated by HIPPIE-EXPAND-FUNCTION.
The optional argument can be generated with `make-hippie-expand-function'."
  (let ((this-command 'my/hippie-expand-completions)
        (last-command last-command)
        (buffer-modified (buffer-modified-p))
        (hippie-expand-function (or hippie-expand-function 'hippie-expand)))
    (cl-flet ((ding)) ; avoid the (ding) when hippie-expand exhausts its options.
      (while (progn
               (funcall hippie-expand-function nil)
               (setq last-command 'my/hippie-expand-completions)
               (not (equal he-num -1)))))
    ;; Evaluating the completions modifies the buffer, however we will finish
    ;; up in the same state that we began.
    (set-buffer-modified-p buffer-modified)
    ;; Provide the options in the order in which they are normally generated.
    (delete he-search-string (reverse he-tried-table))))

;;;###autoload
(defun my/hippie-complete-with (hippie-expand-function)
  "Offer `completing-read' using the specified HIPPIE-EXPAND-FUNCTION."
  (let* ((options (my/hippie-expand-completions hippie-expand-function))
         (selection (and options (completing-read "Completions: " options))))
    (if selection
        (he-substitute-string selection t)
      (message "No expansion found"))))

;;;###autoload
(defun my/hippie-expand-completing-read ()
  "Offer `completing-read' for the word at point."
  (interactive)
  (my/hippie-complete-with 'hippie-expand))

(add-hook 'text-mode-hook 'abbrev-mode)
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-c /") 'my/hippie-expand-completing-read)
;; Local Variables:
;; indent-tabs-mode: nil
;; byte-compile-warnings: (not free-vars noruntime)
;; End:
;;; dabbrev.el ends here
